// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package server

import (
	"errors"
	"fmt"
)

const (
	// ContextKeyAuth is a contextKey of type Auth.
	ContextKeyAuth contextKey = iota
)

var ErrInvalidcontextKey = errors.New("not a valid contextKey")

const _contextKeyName = "auth"

var _contextKeyMap = map[contextKey]string{
	ContextKeyAuth: _contextKeyName[0:4],
}

// String implements the Stringer interface.
func (x contextKey) String() string {
	if str, ok := _contextKeyMap[x]; ok {
		return str
	}
	return fmt.Sprintf("contextKey(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x contextKey) IsValid() bool {
	_, ok := _contextKeyMap[x]
	return ok
}

var _contextKeyValue = map[string]contextKey{
	_contextKeyName[0:4]: ContextKeyAuth,
}

// ParsecontextKey attempts to convert a string to a contextKey.
func ParsecontextKey(name string) (contextKey, error) {
	if x, ok := _contextKeyValue[name]; ok {
		return x, nil
	}
	return contextKey(0), fmt.Errorf("%s is %w", name, ErrInvalidcontextKey)
}
