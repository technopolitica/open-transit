// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForRegisterNewVehicles implements pgx.CopyFromSource.
type iteratorForRegisterNewVehicles struct {
	rows                 []RegisterNewVehiclesParams
	skippedFirstNextCall bool
}

func (r *iteratorForRegisterNewVehicles) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForRegisterNewVehicles) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].ExternalID,
		r.rows[0].Provider,
		r.rows[0].DataProvider,
		r.rows[0].VehicleType,
		r.rows[0].PropulsionTypes,
		r.rows[0].Attributes,
		r.rows[0].AccessibilityAttributes,
		r.rows[0].BatteryCapacity,
		r.rows[0].FuelCapacity,
		r.rows[0].MaximumSpeed,
	}, nil
}

func (r iteratorForRegisterNewVehicles) Err() error {
	return nil
}

func (q *Queries) RegisterNewVehicles(ctx context.Context, arg []RegisterNewVehiclesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"vehicle_denormalized"}, []string{"id", "external_id", "provider", "data_provider", "vehicle_type", "propulsion_types", "attributes", "accessibility_attributes", "battery_capacity", "fuel_capacity", "maximum_speed"}, &iteratorForRegisterNewVehicles{rows: arg})
}
