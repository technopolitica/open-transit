// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package domain

import (
	"database/sql/driver"
	"errors"
	"fmt"
)

const (
	// PropulsionTypeUnknown is a PropulsionType of type Unknown.
	PropulsionTypeUnknown PropulsionType = iota
	// PropulsionTypeHuman is a PropulsionType of type Human.
	PropulsionTypeHuman
	// PropulsionTypeElectricAssist is a PropulsionType of type Electric_assist.
	PropulsionTypeElectricAssist
	// PropulsionTypeElectric is a PropulsionType of type Electric.
	PropulsionTypeElectric
	// PropulsionTypeCombustion is a PropulsionType of type Combustion.
	PropulsionTypeCombustion
	// PropulsionTypeCombustionDiesel is a PropulsionType of type Combustion_diesel.
	PropulsionTypeCombustionDiesel
	// PropulsionTypeHybrid is a PropulsionType of type Hybrid.
	PropulsionTypeHybrid
	// PropulsionTypeHydrogenFuelCell is a PropulsionType of type Hydrogen_fuel_cell.
	PropulsionTypeHydrogenFuelCell
	// PropulsionTypePlugInHybrid is a PropulsionType of type Plug_in_hybrid.
	PropulsionTypePlugInHybrid
)

var ErrInvalidPropulsionType = errors.New("not a valid PropulsionType")

const _PropulsionTypeName = "unknownhumanelectric_assistelectriccombustioncombustion_dieselhybridhydrogen_fuel_cellplug_in_hybrid"

var _PropulsionTypeMap = map[PropulsionType]string{
	PropulsionTypeUnknown:          _PropulsionTypeName[0:7],
	PropulsionTypeHuman:            _PropulsionTypeName[7:12],
	PropulsionTypeElectricAssist:   _PropulsionTypeName[12:27],
	PropulsionTypeElectric:         _PropulsionTypeName[27:35],
	PropulsionTypeCombustion:       _PropulsionTypeName[35:45],
	PropulsionTypeCombustionDiesel: _PropulsionTypeName[45:62],
	PropulsionTypeHybrid:           _PropulsionTypeName[62:68],
	PropulsionTypeHydrogenFuelCell: _PropulsionTypeName[68:86],
	PropulsionTypePlugInHybrid:     _PropulsionTypeName[86:100],
}

// String implements the Stringer interface.
func (x PropulsionType) String() string {
	if str, ok := _PropulsionTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("PropulsionType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PropulsionType) IsValid() bool {
	_, ok := _PropulsionTypeMap[x]
	return ok
}

var _PropulsionTypeValue = map[string]PropulsionType{
	_PropulsionTypeName[0:7]:    PropulsionTypeUnknown,
	_PropulsionTypeName[7:12]:   PropulsionTypeHuman,
	_PropulsionTypeName[12:27]:  PropulsionTypeElectricAssist,
	_PropulsionTypeName[27:35]:  PropulsionTypeElectric,
	_PropulsionTypeName[35:45]:  PropulsionTypeCombustion,
	_PropulsionTypeName[45:62]:  PropulsionTypeCombustionDiesel,
	_PropulsionTypeName[62:68]:  PropulsionTypeHybrid,
	_PropulsionTypeName[68:86]:  PropulsionTypeHydrogenFuelCell,
	_PropulsionTypeName[86:100]: PropulsionTypePlugInHybrid,
}

// ParsePropulsionType attempts to convert a string to a PropulsionType.
func ParsePropulsionType(name string) (PropulsionType, error) {
	if x, ok := _PropulsionTypeValue[name]; ok {
		return x, nil
	}
	return PropulsionType(0), fmt.Errorf("%s is %w", name, ErrInvalidPropulsionType)
}

// MarshalText implements the text marshaller method.
func (x PropulsionType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PropulsionType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParsePropulsionType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errPropulsionTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *PropulsionType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = PropulsionType(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = PropulsionType(v)
	case string:
		*x, err = ParsePropulsionType(v)
	case []byte:
		*x, err = ParsePropulsionType(string(v))
	case PropulsionType:
		*x = v
	case int:
		*x = PropulsionType(v)
	case *PropulsionType:
		if v == nil {
			return errPropulsionTypeNilPtr
		}
		*x = *v
	case uint:
		*x = PropulsionType(v)
	case uint64:
		*x = PropulsionType(v)
	case *int:
		if v == nil {
			return errPropulsionTypeNilPtr
		}
		*x = PropulsionType(*v)
	case *int64:
		if v == nil {
			return errPropulsionTypeNilPtr
		}
		*x = PropulsionType(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = PropulsionType(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errPropulsionTypeNilPtr
		}
		*x = PropulsionType(*v)
	case *uint:
		if v == nil {
			return errPropulsionTypeNilPtr
		}
		*x = PropulsionType(*v)
	case *uint64:
		if v == nil {
			return errPropulsionTypeNilPtr
		}
		*x = PropulsionType(*v)
	case *string:
		if v == nil {
			return errPropulsionTypeNilPtr
		}
		*x, err = ParsePropulsionType(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x PropulsionType) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// VehicleTypeOther is a VehicleType of type Other.
	VehicleTypeOther VehicleType = iota
	// VehicleTypeBicycle is a VehicleType of type Bicycle.
	VehicleTypeBicycle
	// VehicleTypeBus is a VehicleType of type Bus.
	VehicleTypeBus
	// VehicleTypeCargoBicycle is a VehicleType of type Cargo_bicycle.
	VehicleTypeCargoBicycle
	// VehicleTypeCar is a VehicleType of type Car.
	VehicleTypeCar
	// VehicleTypeDeliveryRobot is a VehicleType of type Delivery_robot.
	VehicleTypeDeliveryRobot
	// VehicleTypeMoped is a VehicleType of type Moped.
	VehicleTypeMoped
	// VehicleTypeScooterStanding is a VehicleType of type Scooter_standing.
	VehicleTypeScooterStanding
	// VehicleTypeScooterSeated is a VehicleType of type Scooter_seated.
	VehicleTypeScooterSeated
	// VehicleTypeTruck is a VehicleType of type Truck.
	VehicleTypeTruck
)

var ErrInvalidVehicleType = errors.New("not a valid VehicleType")

const _VehicleTypeName = "otherbicyclebuscargo_bicyclecardelivery_robotmopedscooter_standingscooter_seatedtruck"

var _VehicleTypeMap = map[VehicleType]string{
	VehicleTypeOther:           _VehicleTypeName[0:5],
	VehicleTypeBicycle:         _VehicleTypeName[5:12],
	VehicleTypeBus:             _VehicleTypeName[12:15],
	VehicleTypeCargoBicycle:    _VehicleTypeName[15:28],
	VehicleTypeCar:             _VehicleTypeName[28:31],
	VehicleTypeDeliveryRobot:   _VehicleTypeName[31:45],
	VehicleTypeMoped:           _VehicleTypeName[45:50],
	VehicleTypeScooterStanding: _VehicleTypeName[50:66],
	VehicleTypeScooterSeated:   _VehicleTypeName[66:80],
	VehicleTypeTruck:           _VehicleTypeName[80:85],
}

// String implements the Stringer interface.
func (x VehicleType) String() string {
	if str, ok := _VehicleTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("VehicleType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x VehicleType) IsValid() bool {
	_, ok := _VehicleTypeMap[x]
	return ok
}

var _VehicleTypeValue = map[string]VehicleType{
	_VehicleTypeName[0:5]:   VehicleTypeOther,
	_VehicleTypeName[5:12]:  VehicleTypeBicycle,
	_VehicleTypeName[12:15]: VehicleTypeBus,
	_VehicleTypeName[15:28]: VehicleTypeCargoBicycle,
	_VehicleTypeName[28:31]: VehicleTypeCar,
	_VehicleTypeName[31:45]: VehicleTypeDeliveryRobot,
	_VehicleTypeName[45:50]: VehicleTypeMoped,
	_VehicleTypeName[50:66]: VehicleTypeScooterStanding,
	_VehicleTypeName[66:80]: VehicleTypeScooterSeated,
	_VehicleTypeName[80:85]: VehicleTypeTruck,
}

// ParseVehicleType attempts to convert a string to a VehicleType.
func ParseVehicleType(name string) (VehicleType, error) {
	if x, ok := _VehicleTypeValue[name]; ok {
		return x, nil
	}
	return VehicleType(0), fmt.Errorf("%s is %w", name, ErrInvalidVehicleType)
}

// MarshalText implements the text marshaller method.
func (x VehicleType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *VehicleType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseVehicleType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errVehicleTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *VehicleType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = VehicleType(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = VehicleType(v)
	case string:
		*x, err = ParseVehicleType(v)
	case []byte:
		*x, err = ParseVehicleType(string(v))
	case VehicleType:
		*x = v
	case int:
		*x = VehicleType(v)
	case *VehicleType:
		if v == nil {
			return errVehicleTypeNilPtr
		}
		*x = *v
	case uint:
		*x = VehicleType(v)
	case uint64:
		*x = VehicleType(v)
	case *int:
		if v == nil {
			return errVehicleTypeNilPtr
		}
		*x = VehicleType(*v)
	case *int64:
		if v == nil {
			return errVehicleTypeNilPtr
		}
		*x = VehicleType(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = VehicleType(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errVehicleTypeNilPtr
		}
		*x = VehicleType(*v)
	case *uint:
		if v == nil {
			return errVehicleTypeNilPtr
		}
		*x = VehicleType(*v)
	case *uint64:
		if v == nil {
			return errVehicleTypeNilPtr
		}
		*x = VehicleType(*v)
	case *string:
		if v == nil {
			return errVehicleTypeNilPtr
		}
		*x, err = ParseVehicleType(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x VehicleType) Value() (driver.Value, error) {
	return x.String(), nil
}
