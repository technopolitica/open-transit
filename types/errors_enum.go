// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package types

import (
	"database/sql/driver"
	"errors"
	"fmt"
)

const (
	// ApiErrorTypeUnknown is a ApiErrorType of type Unknown.
	ApiErrorTypeUnknown ApiErrorType = iota
	// ApiErrorTypeBadParam is a ApiErrorType of type Bad_param.
	ApiErrorTypeBadParam
	// ApiErrorTypeMissingParam is a ApiErrorType of type Missing_param.
	ApiErrorTypeMissingParam
	// ApiErrorTypeAlreadyRegistered is a ApiErrorType of type Already_registered.
	ApiErrorTypeAlreadyRegistered
)

var ErrInvalidApiErrorType = errors.New("not a valid ApiErrorType")

const _ApiErrorTypeName = "unknownbad_parammissing_paramalready_registered"

var _ApiErrorTypeMap = map[ApiErrorType]string{
	ApiErrorTypeUnknown:           _ApiErrorTypeName[0:7],
	ApiErrorTypeBadParam:          _ApiErrorTypeName[7:16],
	ApiErrorTypeMissingParam:      _ApiErrorTypeName[16:29],
	ApiErrorTypeAlreadyRegistered: _ApiErrorTypeName[29:47],
}

// String implements the Stringer interface.
func (x ApiErrorType) String() string {
	if str, ok := _ApiErrorTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ApiErrorType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ApiErrorType) IsValid() bool {
	_, ok := _ApiErrorTypeMap[x]
	return ok
}

var _ApiErrorTypeValue = map[string]ApiErrorType{
	_ApiErrorTypeName[0:7]:   ApiErrorTypeUnknown,
	_ApiErrorTypeName[7:16]:  ApiErrorTypeBadParam,
	_ApiErrorTypeName[16:29]: ApiErrorTypeMissingParam,
	_ApiErrorTypeName[29:47]: ApiErrorTypeAlreadyRegistered,
}

// ParseApiErrorType attempts to convert a string to a ApiErrorType.
func ParseApiErrorType(name string) (ApiErrorType, error) {
	if x, ok := _ApiErrorTypeValue[name]; ok {
		return x, nil
	}
	return ApiErrorType(0), fmt.Errorf("%s is %w", name, ErrInvalidApiErrorType)
}

// MarshalText implements the text marshaller method.
func (x ApiErrorType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ApiErrorType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseApiErrorType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errApiErrorTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *ApiErrorType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = ApiErrorType(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = ApiErrorType(v)
	case string:
		*x, err = ParseApiErrorType(v)
	case []byte:
		*x, err = ParseApiErrorType(string(v))
	case ApiErrorType:
		*x = v
	case int:
		*x = ApiErrorType(v)
	case *ApiErrorType:
		if v == nil {
			return errApiErrorTypeNilPtr
		}
		*x = *v
	case uint:
		*x = ApiErrorType(v)
	case uint64:
		*x = ApiErrorType(v)
	case *int:
		if v == nil {
			return errApiErrorTypeNilPtr
		}
		*x = ApiErrorType(*v)
	case *int64:
		if v == nil {
			return errApiErrorTypeNilPtr
		}
		*x = ApiErrorType(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = ApiErrorType(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errApiErrorTypeNilPtr
		}
		*x = ApiErrorType(*v)
	case *uint:
		if v == nil {
			return errApiErrorTypeNilPtr
		}
		*x = ApiErrorType(*v)
	case *uint64:
		if v == nil {
			return errApiErrorTypeNilPtr
		}
		*x = ApiErrorType(*v)
	case *string:
		if v == nil {
			return errApiErrorTypeNilPtr
		}
		*x, err = ParseApiErrorType(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x ApiErrorType) Value() (driver.Value, error) {
	return x.String(), nil
}
